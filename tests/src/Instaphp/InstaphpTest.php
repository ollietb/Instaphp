<?php

/*
 * The MIT License (MIT)
 * Copyright © 2013 Randy Sesser <randy@instaphp.com>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * @author Randy Sesser <randy@instaphp.com>
 * @filesource
 */

namespace Instaphp;

use GuzzleHttp\Client as GuzzleClient;
use Http\Adapter\Guzzle6\Client as GuzzleAdapter;
use Http\Discovery\HttpClientDiscovery;
use Http\Discovery\Strategy\MockClientStrategy;
use Monolog\Logger;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-22 at 22:16:22.
 *
 * @ignore
 */
class InstaphpTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Instaphp
     */
    protected $object;

    protected $config = [
        'api_endpoint'         => 'https://api.instagram.com/{version}',
        'api_protocol'         => 'https',
        'api_host'             => 'api.instagram.com',
        'api_version'          => 'v1',
        'client_id'            => TEST_CLIENT_ID,
        'client_secret'        => TEST_CLIENT_SECRET,
        'access_token'         => '',
        'redirect_uri'         => TEST_REDIRECT_URI,
        'http_useragent'       => 'Instaphp/Guzzle/cUrl v3 (+http://instaphp.com)',
        'http_timeout'         => 6,
        'http_connect_timeout' => 2,
        'log_enabled'          => true,
        'log_level'            => Logger::DEBUG,
        'log_path'             => './instagram_test.log',
        'client_ip'            => '127.0.0.1',
        'debug'                => true,
        'verify'               => true,
    ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        HttpClientDiscovery::prependStrategy(MockClientStrategy::class);
        $this->config['access_token'] = '';
        $this->config['client_ip']    = '127.0.0.1';
        $this->object                 = new Instaphp($this->config);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Instaphp\Instaphp::__construct
     */
    public function testConstructor()
    {
        $config                 = $this->config;
        $config['access_token'] = TEST_ACCESS_TOKEN;

        $guzzleConfig = [
            'http_timeout'         => 6,
            'http_connect_timeout' => 2,
            'verify'               => true,
        ];
        $guzzleClient = new GuzzleClient($guzzleConfig);

        $adapter = new GuzzleAdapter($guzzleClient);

        $obj = new Instaphp($config, $adapter);
        $this->assertSame(TEST_ACCESS_TOKEN, $obj->getAccessToken());
        $this->assertTrue($obj->isAuthorized());
    }

    /**
     * @covers Instaphp\Instaphp::__get
     */
    public function test__get()
    {
        $users = $this->object->users;
        $this->assertNotNull($users);
        $this->assertInstanceOf('\Instaphp\Instagram\Users', $users);
    }

    /**
     * @covers Instaphp\Instaphp::__isset
     *
     * @todo   Implement test__isset().
     */
    public function test__isset()
    {
        $media = $this->object->media;
        $this->assertTrue(isset($this->object->media));
    }

    /**
     * @covers Instaphp\Instaphp::__unset
     *
     * @todo   Implement test__unset().
     */
    public function test__unset()
    {
        $media = $this->object->media;
        $this->assertTrue(isset($this->object->media));
        unset($this->object->Media);
        $this->assertTrue(!isset($this->object->Media));
    }

    /**
     * @covers Instaphp\Instaphp::setAccessToken
     * @covers Instaphp\Instaphp::getAccessToken
     */
    public function testSetAccessToken()
    {
        $this->assertSame(TEST_ACCESS_TOKEN, $this->object->getAccessToken());
        $this->assertSame(TEST_ACCESS_TOKEN, $this->object->Users->getAccessToken());

        $newAccessToken = '0123456789';

        $this->object->setAccessToken($newAccessToken);
        $this->assertSame($newAccessToken, $this->object->getAccessToken());
        $this->assertSame($newAccessToken, $this->object->Users->getAccessToken());
        $this->assertSame($newAccessToken, $this->object->Tags->getAccessToken());
    }

    /**
     * @covers Instagram\Instagram::isAuthorized
     * @covers Instaphp\Instaphp::isAuthorized
     */
    public function testIsAuthorized()
    {
        $this->object->setAccessToken(TEST_ACCESS_TOKEN);
        $this->assertTrue($this->object->isAuthorized());
    }

    /**
     * @covers Instaphp\Instaphp::getClientId
     */
    public function testGetClientId()
    {
        $id = $this->object->getClientId();

        $this->assertSame($id, TEST_CLIENT_ID);
    }

    /**
     * @covers Instaphp\Instaphp::getClientSecret
     */
    public function testGetClientSecret()
    {
        $id = $this->object->getClientSecret();

        $this->assertSame($id, TEST_CLIENT_SECRET);
    }

    /**
     * @covers Instaphp\Instaphp::getRedirectUri
     */
    public function testGetRedirectUri()
    {
        $id = $this->object->getRedirectUri();

        $this->assertSame($id, TEST_REDIRECT_URI);
    }
}
